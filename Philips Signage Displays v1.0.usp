/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
System Name:
System Number:
Programmer: DGG
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Philips Signage Displays v1.0"
#CATEGORY "24" // TV/Video Projector
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENABLE_DYNAMIC
// #HINT ""
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

// MAX STUFF
#DEFINE_CONSTANT MAX_BUFFER_SIZE		2048
#DEFINE_CONSTANT MAX_SOURCES 			19
#DEFINE_CONSTANT MAX_PICTURE_MODES		7
#DEFINE_CONSTANT MAX_PIP_MODES 			11
#DEFINE_CONSTANT MAX_PIP_POSITIONS		5
#DEFINE_CONSTANT MAX_PIP_QUADRANTS		3
#DEFINE_CONSTANT MAX_IR_LOCK_MODES		7
#DEFINE_CONSTANT MAX_KEYPAD_LOCK_MODES	5

#DEFINE_CONSTANT MAX_HOR_MONITORS		15
#DEFINE_CONSTANT MAX_VER_MONITORS		10
#DEFINE_CONSTANT MAX_TOTAL_MONITORS		150

// MIN STUFF
#DEFINE_CONSTANT MIN_TOTAL_MONITORS		1

// VALUE RESET
#DEFINE_CONSTANT NULL_STRING 			""
#DEFINE_CONSTANT NULL_VALUE	 			0

// OTHER STUFF
#DEFINE_CONSTANT TRUE 					1
#DEFINE_CONSTANT FALSE 					0

#HELP_BEGIN
To be used with Philips Signage Displays RS232 v1.0.umc or Philips Signage Displays IP v1.0.umc modules only.
Not to be used as a stand-alone module. 
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/

#USER_SIMPLSHARP_LIBRARY "PhilipsSignageDisplays"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT 	_SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, 
				_SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, Connect, Disconnect, Initialize,
				Enable_Polling, Power_On, Power_Off, Power_Toggle, Tiling_On, Tiling_Off, Tiling_Toggle, 
				Volume_Speaker_Up, Volume_Speaker_Down, Volume_Audio_Up, Volume_Audio_Down, Enable_Debug, Get_Temp,
				Get_Manufacturer, Get_Model, Get_Serial, Get_Firmware, Send_Volume_Speaker_Level, Send_Volume_Audio_Level;    

ANALOG_INPUT	Input_Source, PIP_Mode, PIP_Position, PIP_Source_Quadrant_2, PIP_Source_Quadrant_3, 
				PIP_Source_Quadrant_4, IR_Lock, Keypad_Lock, Volume_Speaker_Set, Volume_Audio_Set, Picture_Mode;

BUFFER_INPUT 	From_Device[MAX_BUFFER_SIZE];  
         
/*----------------------------------------------------------------------------------------*/

DIGITAL_OUTPUT 	_SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_,
                _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, Is_Communicating, Is_Initialized, Power_Is_On, Tiling_Is_On;
       
ANALOG_OUTPUT 	Source_FB, PIP_Mode_FB, PIP_Position_FB, PIP_Source_Quadrant_2_FB, PIP_Source_Quadrant_3_FB, 
				PIP_Source_Quadrant_4_FB, IR_Lock_FB, Keypad_Lock_FB, Volume_Speaker_Level, Volume_Audio_Level,
				Picture_Mode_FB;

STRING_OUTPUT 	Info_Temp, Info_Manufacturer, Info_Model, Info_Serial, Info_Firmware, To_Device;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER Control_Type, Monitor_ID, Frame_Comp, Horizontal_Count, Vertical_Count, Volume_Speaker_Step_Size, Volume_Audio_Step_Size,
				  Supports_PiP, PiP_Type, Supports_IR_Lock, Supports_Keypad_Lock, Supports_Speaker_Volume, Supports_Audio_Volume, Supports_Picture_Mode, 
				  Supports_Video_Wall, Video_Wall_Family;

STRING_PARAMETER IP_Address[100];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES Control_Type
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Monitor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 255d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Frame_Comp
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Horizontal_Count
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 15d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Vertical_Count
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Volume_Speaker_Step_Size
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 100d;
   propDefaultValue = 5d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Volume_Audio_Step_Size
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 100d;
   propDefaultValue = 5d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_PiP
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES
                          
#BEGIN_PARAMETER_PROPERTIES PiP_Type
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_IR_Lock
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_Keypad_Lock
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_Speaker_Volume
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_Audio_Volume
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_Picture_Mode
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Supports_Video_Wall
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 1d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Video_Wall_Family
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 2d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IP_Address
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "0.0.0.0";
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

SicpDisplay monitor;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

FUNCTION ClearAllInfo()
{
   	Is_Communicating = FALSE;
	Is_Initialized = FALSE; 
	Power_Is_On = FALSE;
	Tiling_Is_On = FALSE;
       
	Source_FB = NULL_VALUE;
    PIP_Mode_FB = NULL_VALUE;
	PIP_Position_FB = NULL_VALUE;
	PIP_Source_Quadrant_2_FB = NULL_VALUE;
	PIP_Source_Quadrant_3_FB = NULL_VALUE;
	PIP_Source_Quadrant_4_FB = NULL_VALUE;
	IR_Lock_FB = NULL_VALUE;
	Keypad_Lock_FB = NULL_VALUE;
	Volume_Speaker_Level = NULL_VALUE;
	Volume_Audio_Level = NULL_VALUE;
	Picture_Mode_FB = NULL_VALUE;

    To_Device = NULL_STRING;
}
                                                                                     
////////////////////////////////////////////////////////////////////////////////////////////
//	CALLBACKS
////////////////////////////////////////////////////////////////////////////////////////////

CALLBACK FUNCTION SendDebug(STRING msg)
{
   	TRACE("%s", msg);
}

CALLBACK FUNCTION OnCommunicatingChange(INTEGER state)
{
   	Is_Communicating = state;
}

CALLBACK FUNCTION OnInitializeChange(INTEGER state)
{
   	Is_Initialized = state;	
}

CALLBACK FUNCTION OnPowerChange(INTEGER state)
{
   	Power_Is_On = state;	
}

CALLBACK FUNCTION OnTilingChange(INTEGER state)
{
   	Tiling_Is_On = state;	
}

CALLBACK FUNCTION OnVolumeSpeakerChange(INTEGER level)
{
	Volume_Speaker_Level = level;
}

CALLBACK FUNCTION OnVolumeAudioChange(INTEGER level)
{
	Volume_Audio_Level = level;
}

CALLBACK FUNCTION OnSourceChange(INTEGER source)
{
	IF(source > 0 && source <= MAX_SOURCES)
		Source_FB = source;
	ELSE
		Source_FB = 0;
}

CALLBACK FUNCTION OnPipModeChange(INTEGER mode)
{
	IF(mode > 0 && mode <= MAX_PIP_MODES)
		PIP_Mode_FB = mode;
	ELSE
		PIP_Mode_FB = 0;
}

CALLBACK FUNCTION OnPipPositionChange(INTEGER position)
{
	IF(position > 0 && position <= MAX_PIP_POSITIONS)
		PIP_Position_FB = position;
	ELSE
		PIP_Position_FB = 0;
}

CALLBACK FUNCTION OnPipSourceQuadrant2Change(INTEGER source)
{
	IF(source > 0 && source <= MAX_SOURCES)
		PIP_Source_Quadrant_2_FB = source;
	ELSE
		PIP_Source_Quadrant_2_FB = 0;
}

CALLBACK FUNCTION OnPipSourceQuadrant3Change(INTEGER source)
{
	IF(source > 0 && source <= MAX_SOURCES)
		PIP_Source_Quadrant_3_FB = source;
	ELSE
		PIP_Source_Quadrant_3_FB = 0;
}

CALLBACK FUNCTION OnPipSourceQuadrant4Change(INTEGER source)
{
	IF(source > 0 && source <= MAX_SOURCES)
		PIP_Source_Quadrant_4_FB = source;
	ELSE
		PIP_Source_Quadrant_4_FB = 0;
}

CALLBACK FUNCTION OnIrLockChange(INTEGER mode)
{
	IF(mode > 0 && mode <= MAX_IR_LOCK_MODES)
		IR_Lock_FB = mode;
	ELSE
		IR_Lock_FB = 0;
}

CALLBACK FUNCTION OnKeypadLockChange(INTEGER mode)
{
	IF(mode > 0 && mode <= MAX_KEYPAD_LOCK_MODES)
		Keypad_Lock_FB = mode;
	ELSE
		Keypad_Lock_FB = 0;
}

CALLBACK FUNCTION OnPictureModeChange(INTEGER mode)
{
	IF(mode > 0 && mode <= MAX_PICTURE_MODES)
		Picture_Mode_FB = mode;
	ELSE
		Picture_Mode_FB = 0;
}

CALLBACK FUNCTION OnTempChange(STRING msg)
{
	MAKESTRING(Info_Temp, "%s", msg);	
}

CALLBACK FUNCTION OnManufacturerChange(STRING msg)
{
	MAKESTRING(Info_Manufacturer, "%s", msg);	
}

CALLBACK FUNCTION OnModelChange(STRING msg)
{
	MAKESTRING(Info_Model, "%s", msg);	
}

CALLBACK FUNCTION OnSerialChange(STRING msg)
{
	MAKESTRING(Info_Serial, "%s", msg);	
}

CALLBACK FUNCTION OnFirmwareChange(STRING msg)
{
	MAKESTRING(Info_Firmware, "%s", msg);	
}

CALLBACK FUNCTION OnDataToDevice(STRING msg)
{
	MAKESTRING(To_Device, "%s", msg);	
}
 
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
       
THREADSAFE PUSH Connect
{
	monitor.Connect(); 
}

THREADSAFE PUSH Disconnect
{
	monitor.Disconnect(); 
}

THREADSAFE PUSH Initialize
{
	ClearAllInfo();	
	monitor.Initialize(TRUE);
}

THREADSAFE PUSH Power_On
{
	monitor.SetPower(TRUE);
}

THREADSAFE PUSH Power_Off
{
    monitor.SetPower(FALSE);
}

THREADSAFE PUSH Power_Toggle
{
    monitor.TogglePower();
}

THREADSAFE PUSH Tiling_On
{
    monitor.SetTiling(TRUE);
}

THREADSAFE PUSH Tiling_Off
{
    monitor.SetTiling(FALSE);
}

THREADSAFE PUSH Tiling_Toggle
{
    monitor.ToggleTiling();
}

THREADSAFE CHANGE Volume_Speaker_Set
{
	IF (Send_Volume_Speaker_Level)
	{
		monitor.SetSpeakerVolume(Volume_Speaker_Set);
		DELAY(30);
	}
}

THREADSAFE PUSH Send_Volume_Speaker_Level
{
	IF (Volume_Speaker_Set != Volume_Speaker_Level)
		monitor.SetSpeakerVolume(Volume_Speaker_Set);
}

THREADSAFE PUSH Volume_Speaker_Up
{
    monitor.RampSpeakerVolumeUp();
}

THREADSAFE PUSH Volume_Speaker_Down
{
    monitor.RampSpeakerVolumeDown();
}

THREADSAFE CHANGE Volume_Audio_Set
{
	IF (Send_Volume_Audio_Level)
	{
		monitor.SetAudioVolume(Volume_Audio_Set);
		DELAY(30);
	}
}

THREADSAFE PUSH Send_Volume_Audio_Level
{
	IF (Volume_Audio_Set != Volume_Audio_Level)
		monitor.SetAudioVolume(Volume_Audio_Set);
}
 
THREADSAFE PUSH Volume_Audio_Up
{
    monitor.RampAudioVolumeUp();
}

THREADSAFE PUSH Volume_Audio_Down
{
    monitor.RampAudioVolumeDown();
}

THREADSAFE CHANGE Input_Source
{
	monitor.SetSource(Input_Source);
}

THREADSAFE CHANGE PIP_Mode
{
	monitor.SetPipMode(PIP_Mode);
}

THREADSAFE CHANGE PIP_Position
{
	monitor.SetPipPosition(PIP_Position);
}

THREADSAFE CHANGE PIP_Source_Quadrant_2
{
	monitor.SetPipSourceQuadrant2(PIP_Source_Quadrant_2);
}

THREADSAFE CHANGE PIP_Source_Quadrant_3
{
	monitor.SetPipSourceQuadrant3(PIP_Source_Quadrant_3);
}

THREADSAFE CHANGE PIP_Source_Quadrant_4
{
	monitor.SetPipSourceQuadrant4(PIP_Source_Quadrant_4);
} 
 
THREADSAFE CHANGE IR_Lock
{
	monitor.SetIrLock(IR_Lock);
}

THREADSAFE CHANGE Keypad_Lock
{
	monitor.SetKeypadLock(Keypad_Lock);
}

THREADSAFE CHANGE Picture_Mode
{
	monitor.SetPictureMode(Picture_Mode);
}
                     
THREADSAFE PUSH Get_Temp
{
    monitor.GetTemp();
}

THREADSAFE PUSH Get_Manufacturer
{
    monitor.GetManufacturer();
}

THREADSAFE PUSH Get_Model
{
    monitor.GetModel();
}

THREADSAFE PUSH Get_Serial
{
    monitor.GetSerial();
}

THREADSAFE PUSH Get_Firmware
{
    monitor.GetFirmware();
}

THREADSAFE PUSH Enable_Polling
{
	monitor.SetPolling(TRUE);
}

THREADSAFE RELEASE Enable_Polling
{
	monitor.SetPolling(FALSE);
}

THREADSAFE PUSH Enable_Debug
{
	monitor.SetDebug(TRUE);
}

THREADSAFE RELEASE Enable_Debug
{
	monitor.SetDebug(FALSE);
}

THREADSAFE CHANGE From_Device
{           
	STRING msg[MAX_BUFFER_SIZE];

	WHILE(TRUE)
    {
        TRY
        {
			msg = GATHERBYLENGTH(1, From_Device);
			monitor.OnDataFromDevice(msg);
        }
        CATCH
        {
            trace("Issue with Device Rx message handling\n");
        }
    }
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

FUNCTION Main()
{
    WAITFORINITIALIZATIONCOMPLETE();
    
	ClearAllInfo();
	
	Info_Temp = NULL_STRING;
    Info_Manufacturer = NULL_STRING;
	Info_Model = NULL_STRING;
	Info_Serial = NULL_STRING;
	Info_Firmware = NULL_STRING;

	REGISTERDELEGATE(monitor, SendDebug, SendDebug);
	REGISTERDELEGATE(monitor, OnCommunicatingChange, OnCommunicatingChange);
	REGISTERDELEGATE(monitor, OnInitializeChange, OnInitializeChange);
    REGISTERDELEGATE(monitor, OnPowerChange, OnPowerChange);
	REGISTERDELEGATE(monitor, OnTilingChange, OnTilingChange);
    REGISTERDELEGATE(monitor, OnVolumeSpeakerChange, OnVolumeSpeakerChange);
	REGISTERDELEGATE(monitor, OnVolumeAudioChange, OnVolumeAudioChange);
    REGISTERDELEGATE(monitor, OnSourceChange, OnSourceChange);
	REGISTERDELEGATE(monitor, OnPipModeChange, OnPipModeChange);
    REGISTERDELEGATE(monitor, OnPipPositionChange, OnPipPositionChange);
    REGISTERDELEGATE(monitor, OnPipSourceQuadrant2Change, OnPipSourceQuadrant2Change);
	REGISTERDELEGATE(monitor, OnPipSourceQuadrant3Change, OnPipSourceQuadrant3Change);
	REGISTERDELEGATE(monitor, OnPipSourceQuadrant4Change, OnPipSourceQuadrant4Change);
    REGISTERDELEGATE(monitor, OnIrLockChange, OnIrLockChange);
	REGISTERDELEGATE(monitor, OnKeypadLockChange, OnKeypadLockChange);
	REGISTERDELEGATE(monitor, OnPictureModeChange, OnPictureModeChange);
    REGISTERDELEGATE(monitor, OnTempChange, OnTempChange);
    REGISTERDELEGATE(monitor, OnManufacturerChange, OnManufacturerChange);
	REGISTERDELEGATE(monitor, OnModelChange, OnModelChange);
    REGISTERDELEGATE(monitor, OnSerialChange, OnSerialChange);
    REGISTERDELEGATE(monitor, OnFirmwareChange, OnFirmwareChange);
	REGISTERDELEGATE(monitor, OnDataToDevice, OnDataToDevice);
    
    // DO NOT REMOVE!                                            
	DELAY(500);

	monitor.Configure(Control_Type, IP_Address, Monitor_ID, Frame_Comp, Horizontal_Count, Vertical_Count, Volume_Speaker_Step_Size, Volume_Audio_Step_Size, Supports_PiP, PiP_Type, Supports_IR_Lock, Supports_Keypad_Lock, Supports_Speaker_Volume, Supports_Audio_Volume, Supports_Picture_Mode, Supports_Video_Wall, Video_Wall_Family);  
      
	IF (Connect)
		monitor.Connect();
}
